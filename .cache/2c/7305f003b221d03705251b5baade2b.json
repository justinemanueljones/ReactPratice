{"id":"components/Spinner.js","dependencies":[{"name":"/Users/emanueljones/Documents/lambdaschool/React/Modules/package.json","includedInParent":true,"mtime":1599419650023},{"name":"react","loc":{"line":1,"column":32},"parent":"/Users/emanueljones/Documents/lambdaschool/React/Modules/src/components/Spinner.js","resolved":"/Users/emanueljones/Documents/lambdaschool/React/Modules/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Spinner;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* STEP 0 */\nfunction Spinner() {\n  /* STEP 1 Create a 'spinnerOn', 'setSpinnerOn' pair of variables using the state hook.\n  The 'spinnerOn' should be initialized to true if you want the spinner to be visible on page load, false otherwise.*/\n  var _useState = (0, _react.useState)(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      spinnerOn = _useState2[0],\n      setSpinnerOn = _useState2[1];\n\n  var toggleSpinner = function toggleSpinner() {\n    /* STEP 4 This click handler needs to toggle the spinner by setting \"whether on\" to be the opposite of what it currently is.\n    Do you remember the operator we use to do \"not\"?*/\n    setSpinnerOn(!spinnerOn);\n  };\n\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"widget-spinner container\"\n  }, /*#__PURE__*/_react.default.createElement(\"h2\", null, \"Spinner\"), spinnerOn && /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"spinner\"\n  }, \"--+--\")\n  /* STEP 2   This is called a logical expression. If the expressions on both sides of the '&&' are truthy,\n  the one on the right becomes the value of the whole line. If an expression on either side of the '&&'\n  is falsy, the one on the left becomes the value of the whole line. It's a neat little trick to render\n  a React element (in this case the spinner) conditionally: only if the variable on the left is truthy.*/\n  , /*#__PURE__*/_react.default.createElement(\"button\", {\n    onClick: toggleSpinner\n  }, spinnerOn === true ? 'Hide' : 'Show', \" Spinner\"), \" \");\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"components/Spinner.js","original":{"line":1,"column":0}},{"generated":{"line":26,"column":0},"source":"components/Spinner.js","original":{"line":1,"column":41}},{"generated":{"line":27,"column":0},"source":"components/Spinner.js","original":{"line":3,"column":15}},{"name":"Spinner","generated":{"line":27,"column":9},"source":"components/Spinner.js","original":{"line":3,"column":24}},{"generated":{"line":27,"column":16},"source":"components/Spinner.js","original":{"line":3,"column":15}},{"generated":{"line":27,"column":19},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"generated":{"line":28,"column":0},"source":"components/Spinner.js","original":{"line":4,"column":2}},{"generated":{"line":30,"column":0},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"generated":{"line":30,"column":18},"source":"components/Spinner.js","original":{"line":6,"column":36}},{"generated":{"line":30,"column":39},"source":"components/Spinner.js","original":{"line":6,"column":45}},{"generated":{"line":30,"column":43},"source":"components/Spinner.js","original":{"line":6,"column":36}},{"generated":{"line":30,"column":44},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"generated":{"line":31,"column":0},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"generated":{"line":32,"column":0},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"name":"spinnerOn","generated":{"line":32,"column":6},"source":"components/Spinner.js","original":{"line":6,"column":9}},{"generated":{"line":32,"column":15},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"generated":{"line":33,"column":0},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"name":"setSpinnerOn","generated":{"line":33,"column":6},"source":"components/Spinner.js","original":{"line":6,"column":20}},{"generated":{"line":33,"column":18},"source":"components/Spinner.js","original":{"line":3,"column":34}},{"generated":{"line":35,"column":0},"source":"components/Spinner.js","original":{"line":8,"column":2}},{"name":"toggleSpinner","generated":{"line":35,"column":6},"source":"components/Spinner.js","original":{"line":8,"column":8}},{"generated":{"line":35,"column":19},"source":"components/Spinner.js","original":{"line":8,"column":21}},{"generated":{"line":35,"column":22},"source":"components/Spinner.js","original":{"line":8,"column":24}},{"name":"toggleSpinner","generated":{"line":35,"column":31},"source":"components/Spinner.js","original":{"line":8,"column":8}},{"generated":{"line":35,"column":44},"source":"components/Spinner.js","original":{"line":8,"column":24}},{"generated":{"line":35,"column":47},"source":"components/Spinner.js","original":{"line":8,"column":30}},{"generated":{"line":36,"column":0},"source":"components/Spinner.js","original":{"line":9,"column":4}},{"name":"setSpinnerOn","generated":{"line":38,"column":0},"source":"components/Spinner.js","original":{"line":11,"column":4}},{"name":"setSpinnerOn","generated":{"line":38,"column":4},"source":"components/Spinner.js","original":{"line":11,"column":4}},{"generated":{"line":38,"column":16},"source":"components/Spinner.js","original":{"line":11,"column":16}},{"generated":{"line":38,"column":17},"source":"components/Spinner.js","original":{"line":11,"column":17}},{"name":"spinnerOn","generated":{"line":38,"column":18},"source":"components/Spinner.js","original":{"line":11,"column":18}},{"generated":{"line":38,"column":27},"source":"components/Spinner.js","original":{"line":11,"column":16}},{"generated":{"line":38,"column":28},"source":"components/Spinner.js","original":{"line":11,"column":4}},{"generated":{"line":39,"column":0},"source":"components/Spinner.js","original":{"line":12,"column":3}},{"generated":{"line":39,"column":3},"source":"components/Spinner.js","original":{"line":8,"column":2}},{"generated":{"line":41,"column":0},"source":"components/Spinner.js","original":{"line":14,"column":2}},{"generated":{"line":41,"column":22},"source":"components/Spinner.js","original":{"line":15,"column":4}},{"generated":{"line":42,"column":0},"source":"components/Spinner.js","original":{"line":15,"column":9}},{"generated":{"line":42,"column":4},"source":"components/Spinner.js","original":{"line":15,"column":9}},{"generated":{"line":42,"column":13},"source":"components/Spinner.js","original":{"line":15,"column":18}},{"generated":{"line":42,"column":15},"source":"components/Spinner.js","original":{"line":15,"column":19}},{"generated":{"line":43,"column":0},"source":"components/Spinner.js","original":{"line":15,"column":4}},{"generated":{"line":43,"column":18},"source":"components/Spinner.js","original":{"line":16,"column":6}},{"generated":{"line":43,"column":69},"source":"components/Spinner.js","original":{"line":15,"column":4}},{"name":"spinnerOn","generated":{"line":43,"column":71},"source":"components/Spinner.js","original":{"line":18,"column":8}},{"generated":{"line":43,"column":80},"source":"components/Spinner.js","original":{"line":18,"column":17}},{"generated":{"line":43,"column":97},"source":"components/Spinner.js","original":{"line":18,"column":21}},{"generated":{"line":44,"column":0},"source":"components/Spinner.js","original":{"line":18,"column":26}},{"generated":{"line":44,"column":4},"source":"components/Spinner.js","original":{"line":18,"column":26}},{"generated":{"line":44,"column":13},"source":"components/Spinner.js","original":{"line":18,"column":35}},{"generated":{"line":44,"column":15},"source":"components/Spinner.js","original":{"line":18,"column":36}},{"generated":{"line":45,"column":0},"source":"components/Spinner.js","original":{"line":18,"column":21}},{"generated":{"line":46,"column":0},"source":"components/Spinner.js","original":{"line":18,"column":58}},{"generated":{"line":50,"column":0},"source":"components/Spinner.js","original":{"line":15,"column":4}},{"generated":{"line":50,"column":17},"source":"components/Spinner.js","original":{"line":23,"column":6}},{"generated":{"line":51,"column":0},"source":"components/Spinner.js","original":{"line":23,"column":14}},{"generated":{"line":51,"column":4},"source":"components/Spinner.js","original":{"line":23,"column":14}},{"generated":{"line":51,"column":11},"source":"components/Spinner.js","original":{"line":23,"column":21}},{"name":"toggleSpinner","generated":{"line":51,"column":13},"source":"components/Spinner.js","original":{"line":23,"column":23}},{"generated":{"line":52,"column":0},"source":"components/Spinner.js","original":{"line":23,"column":6}},{"name":"spinnerOn","generated":{"line":52,"column":5},"source":"components/Spinner.js","original":{"line":23,"column":39}},{"generated":{"line":52,"column":14},"source":"components/Spinner.js","original":{"line":23,"column":48}},{"generated":{"line":52,"column":19},"source":"components/Spinner.js","original":{"line":23,"column":53}},{"generated":{"line":52,"column":23},"source":"components/Spinner.js","original":{"line":23,"column":39}},{"generated":{"line":52,"column":26},"source":"components/Spinner.js","original":{"line":23,"column":60}},{"generated":{"line":52,"column":32},"source":"components/Spinner.js","original":{"line":23,"column":39}},{"generated":{"line":52,"column":35},"source":"components/Spinner.js","original":{"line":23,"column":69}},{"generated":{"line":52,"column":41},"source":"components/Spinner.js","original":{"line":23,"column":6}},{"generated":{"line":52,"column":54},"source":"components/Spinner.js","original":{"line":15,"column":4}},{"generated":{"line":52,"column":60},"source":"components/Spinner.js","original":{"line":14,"column":2}},{"generated":{"line":53,"column":0},"source":"components/Spinner.js","original":{"line":26,"column":1}}],"sources":{"components/Spinner.js":"import React, { useState } from 'react'; /* STEP 0 */\n\nexport default function Spinner() {\n  /* STEP 1 Create a 'spinnerOn', 'setSpinnerOn' pair of variables using the state hook.\n  The 'spinnerOn' should be initialized to true if you want the spinner to be visible on page load, false otherwise.*/\n  const [spinnerOn, setSpinnerOn] = useState(true);\n\n  const toggleSpinner = () => {\n    /* STEP 4 This click handler needs to toggle the spinner by setting \"whether on\" to be the opposite of what it currently is.\n  Do you remember the operator we use to do \"not\"?*/\n    setSpinnerOn(!spinnerOn);\n  };\n\n  return (\n    <div className='widget-spinner container'>\n      <h2>Spinner</h2>\n      {\n        spinnerOn && <div className='spinner'>--+--</div> /* STEP 2   This is called a logical expression. If the expressions on both sides of the '&&' are truthy,\n  the one on the right becomes the value of the whole line. If an expression on either side of the '&&'\n  is falsy, the one on the left becomes the value of the whole line. It's a neat little trick to render\n  a React element (in this case the spinner) conditionally: only if the variable on the left is truthy.*/\n      }\n      <button onClick={toggleSpinner}>{spinnerOn === true ? 'Hide' : 'Show'} Spinner</button> {/* STEP 3 Use a ternary expression inside the text of the button, to render \"Hide\" or \"Show\" depending on the value of 'spinnerOn'.*/}\n    </div>\n  );\n}\n"},"lineCount":null}},"error":null,"hash":"b74e82fb29ea2ce7a1a5223db87be844","cacheData":{"env":{}}}